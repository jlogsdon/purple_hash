{"name":"Purple hash","tagline":"A lightweight Configuration gem built with Hashes","body":"Purple Hash is a configuration library for ruby that builds upon Ruby's core\r\nHash. At it's core Purple allows you to access keys that do not exist yet by\r\ndefining a default value proc which provides you with a new instance of a\r\nPurple Hash. Keys are also normalized to symbols, similar to how Rail's\r\n`HashWithIndifferentAccess` works.\r\n\r\n```ruby\r\nrequire 'purple_hash'\r\n\r\nconfig = PurpleHash.new\r\nconfig[:db]['user'] = 'root'\r\nconfig # => {:db => {:user => 'root'}}\r\n\r\nconfig = PurpleHash.new(:db => {'user' => 'root'})\r\nconfig # => {:db => {:user => 'root'}}\r\n```\r\n\r\nBecause a `PurpleHash` is simply a sub-class of `Hash` you can do anything you\r\nwould normally be able to without any hacks or tricks. A core extension of Hash\r\nis provided if you wish to use it, simply require `core_ext/hash/purple_hash`\r\nand call `#to_purple_hash` on any Ruby hash to get a `PurpleHash` back.\r\n\r\n**Note:** If you try to change the default value on a `PurpleHash` a `RuntimeError`\r\nwill be raised informing you that this is not allowed.\r\n\r\n## API\r\n\r\n`PurpleHash` provides a very basic API on top of what Hash already provides.\r\n\r\n### `#configure_from_hash(hash)`\r\n\r\nTakes a raw `Hash` and converts itself and any nested hashes to a `PurpleHash`.\r\nUsed internally by `#initialize`\r\n\r\n### `#freeze!`\r\n\r\nLocks the hash from any futher modifications. A `PurpleHash::HashFrozen` will be\r\nraised if the hash is frozen and you attempt to modify it. Keys that are not\r\nalready defined will return `nil` instead of a new `PurpleHash`.\r\n\r\n### `#frozen?`\r\n\r\nFind out if the hash is frozen.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}